# exam_3_star.py


# THREE GOLD STARS
# Question 3-star: Elementary Cellular Automaton

# Please see the video for additional explanation.

# A one-dimensional cellular automata takes in a string, which in our
# case, consists of the characters '.' and 'x', and changes it according
# to some predetermined rules. The rules consider three characters, which
# are a character at position k and its two neighbours, and determine
# what the character at the corresponding position k will be in the new
# string.

# For example, if the character at position k in the string  is '.' and
# its neighbours are '.' and 'x', then the pattern is '..x'. We look up
# '..x' in the table below. In the table, '..x' corresponds to 'x' which
# means that in the new string, 'x' will be at position k.

# Rules:
#          pattern in         position k in        contribution to
# Value    current string     new string           pattern number
#                                                  is 0 if replaced by '.'
#                                                  and value if replaced
#                                                  by 'x'
#   1       '...'               '.'                        1 * 0
#   2       '..x'               'x'                        2 * 1
#   4       '.x.'               'x'                        4 * 1
#   8       '.xx'               'x'                        8 * 1
#  16       'x..'               '.'                       16 * 0
#  32       'x.x'               '.'                       32 * 0
#  64       'xx.'               '.'                       64 * 0
# 128       'xxx'               'x'                      128 * 1
#                                                      ----------
#                                                           142

# To calculate the patterns which will have the central character x, work
# out the values required to sum to the pattern number. For example,
# 32 = 32 so only pattern 32 which is x.x changes the central position to
# an x. All the others have a . in the next line.

# 23 = 16 + 4 + 2 + 1 which means that 'x..', '.x.', '..x' and '...' all
# lead to an 'x' in the next line and the rest have a '.'

# For pattern 142, and starting string
# ...........x...........
# the new strings created will be
# ..........xx...........  (generations = 1)
# .........xx............  (generations = 2)
# ........xx.............  (generations = 3)
# .......xx..............  (generations = 4)
# ......xx...............  (generations = 5)
# .....xx................  (generations = 6)
# ....xx.................  (generations = 7)
# ...xx..................  (generations = 8)
# ..xx...................  (generations = 9)
# .xx....................  (generations = 10)

# Note that the first position of the string is next to the last position
# in the string.

# Define a procedure, cellular_automaton, that takes three inputs:
#     a non-empty string,
#     a pattern number which is an integer between 0 and 255 that
# represents a set of rules, and
#     a positive integer, n, which is the number of generations.
# The procedure should return a string which is the result of
# applying the rules generated by the pattern to the string n times.


def cellular_automaton(string, pattern, generations):
#    print "pattern is: %r" % pattern
    pattern_dict = pattern_gen(pattern)
    print "pattern_dict is: %r" % pattern_dict
    i = 1
    while i <= generations:
        string = process_line(string, pattern_dict)
        i += 1
    return string


def process_line(string, pattern_dict):
    newline = ''
    for k in range(len(string)):
        newline = newline + new_char(extract_chunk(string, k), pattern_dict)
    return newline


def extract_chunk(string, position):
#    print "string is %r: " % string
    length = len(string)
    if length == 1:
        chunk = 3 * string
        return chunk
    if position == 0:
        chunk = string[-1] + string[position] + string[1]
#        print "position == 0"
    elif position == length - 1:
        chunk = string[-2] + string[position] + string[0]
#        print "position == 1"
    else:
        chunk = string[position - 1:position + 2]
#    print "chunk is %r: " % chunk
    return chunk


dictionary = {}
dictionary['...'] = 1
dictionary['..x'] = 2
dictionary['.x.'] = 4
dictionary['.xx'] = 8
dictionary['x..'] = 16
dictionary['x.x'] = 32
dictionary['xx.'] = 64
dictionary['xxx'] = 128


def pattern_gen(number):
    pattern_dict = {}
    if number == 0:
        for e in range(7, -1, -1):
            pattern_dict[2 ** e] = False
        return pattern_dict
    while number != 0:
        for e in range(7, -1, -1):
            if number / 2 ** e:
                pattern_dict[2 ** e] = True
                number -= 2 ** e
            else:
                pattern_dict[2 ** e] = False
    return pattern_dict


def new_char(str, pattern_dict):
    print "string passed to new_char is %r: " % str
    print " dictionary is: %r " % dictionary
    print "dictionary[str] is: %r" % dictionary[str]
    print "pattern_dict is: %r" % pattern_dict
    if pattern_dict[dictionary[str]]:
        return 'x'
    else:
        return '.'


# pattern_dict = pattern_gen(142)


print cellular_automaton('...x....', 0, 1)


# print cellular_automaton('.x.x.x.x.', 17, 2)
#>>> xxxxxxx..
# print cellular_automaton('.x.x.x.x.', 249, 3)
#>>> .x..x.x.x
# print cellular_automaton('...x....', 125, 1)
#>>> xx.xxxxx
# print cellular_automaton('...x....', 125, 2)
#>>> .xxx....
# print cellular_automaton('...x....', 125, 3)
#>>> .x.xxxxx
# print cellular_automaton('...x....', 125, 4)
#>>> xxxx...x
# print cellular_automaton('...x....', 125, 5)
#>>> ...xxx.x
# print cellular_automaton('...x....', 125, 6)
#>>> xx.x.xxx
# print cellular_automaton('...x....', 125, 7)
#>>> .xxxxx..
# print cellular_automaton('...x....', 125, 8)
#>>> .x...xxx
# print cellular_automaton('...x....', 125, 9)
#>>> xxxx.x.x
# print cellular_automaton('...x....', 125, 10)
#>>> ...xxxxx
